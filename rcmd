#!/bin/bash

# COLORS
RED="\e[31m"
GREEN="\e[32m"
ORANGE="\e[33m"
BLUE="\e[34m"
PURPLE="\e[35m"
CYAN="\e[36m"

RED_LIGHT="\e[91m"
GREEN_LIGHT="\e[92m"
ORANGE_LIGHT="\e[93m"
BLUE_LIGHT="\e[94m"
PURPLE_LIGHT="\e[95m"
CYAN_LIGHT="\e[96m"
STOP="\e[0m"

printf "${BLUE_LIGHT}"
clear
figlet -c "Remote Shell"
printf "${STOP}"
getopts s safe_mode
cd "$HOME" || exit

# MENU
while true; do
    clear
    printf "${GREEN_LIGHT}"
    figlet -c "Remote Shell"
    printf "${STOP}"
    printf "${CYAN}"
    if [ "$LANGUAGE" = "pt_BR" ]; then echo -e '\nEscolha uma opção abaixo:\n[1] - Resetar\n[2] - Executar\nSua escolha:'; else echo -e "Choose an option below\n[1] - Reset\n[2] - Execute\nYour choose:"; fi
    read -r menuOption
    printf "${STOP}"
    case "${menuOption}" in
        1|2)
            break
        ;;
        *)
            printf "${RED}"
            if [ "$LANGUAGE" = "pt_BR" ]; then echo "Opção inválida!"; else "Invalid Option!"; fi
            printf "${STOP}"
        ;;
    esac
done

# Check Connection
printf "${BLUE}"
clear
figlet -c "Remote Shell"
if [ "$LANGUAGE" = "pt_BR" ]; then echo -e "\nChecando a conexão..."; else echo -e "\nChecking connection..."; fi
check_connection=$(ping -w 1 githubstatus.com)
printf "${STOP}"

if [ -z "$check_connection" ];then
    printf "${RED_LIGHT}"
    if [ "$LANGUAGE" = "pt_BR" ]; then echo -e "Falha na conexão com a rede\nVerifique isso e tente novamente."; else echo -e "Failed to connect to the network\nCheck this and try again"; fi
    printf "${STOP}"
    exit 1
fi

# Checking args
if [ "$menuOption" = 2 ]; then
    if [ "$#" -lt 3 ] && [ "$safe_mode" = "?" ];then
        if [ -z "$1" ];then
            if [ "$LANGUAGE" = pt_BR ];then
                echo -e "${GREEN_LIGHT}Tempo de espera do comando: [1s/1m/1h/1d...]"
                read -r wait_time
                if [ -d "$HOME/.cmd" ]; then
                    echo
                else
                    echo -e "nome de Usuário do GitHub:"
                    read -r user_git
                    echo -e "Email do GitHub:"
                    read -r email_git
                fi
                echo -e "Quer usar o modo salvar bateria? [s/n]${STOP}"
                read -r sf
                if [ "$sf" = "s" ];then safe_mode=$"s"; fi
                echo
            else
                echo -e "${GREEN}Command wait time: [1s/1m/1h/1d...]"
                read -r wait_time
                if [ -d "$HOME/.cmd" ]; then
                    echo
                else
                    echo -e "Github user:"
                    read -r user_git
                    echo -e "GitHub email:"
                    read -r email_git
                fi
                echo -e "Do you want to use safe_mode? [y/n]${STOP}"
                read -r sf
                if [ "$sf" = "y" ];then safe_mode=$"s"; fi
                echo
            fi
        else
            if [ -z "$1" ];then
            printf "${RED}"
                if [ -d "$HOME/.cmd" ]; then
                    if [ "$LANGUAGE" = "pt_BR" ]; then echo -e 'Comando inválido!\nUso: rcmd [ -s ] <tempo_espera>'; else echo -e 'Invalid command!\nUsage: rcmd [-s] <wait_time>'; fi
                else
                    if [ "$LANGUAGE" = "pt_BR" ]; then echo -e 'Comando inválido!\nUso: rcmd [ -s ] <tempo_espera> <usuario_git> <email_git>'; else echo -e 'Invalid command!\nUsage: rcmd [-s] <wait_time> <github_user> <github_email>'; fi
                fi
                sleep 1
                exit 1
            fi
        fi
    elif [ "$#" -lt 4 ] && [ "$safe_mode" = "s" ];then
        if [ -d "$HOME/.cmd" ] && [ "$#" -lt 2 ]; then
            if [ "$LANGUAGE" = "pt_BR" ]; then echo -e 'Comando inválido!\nUso: rcmd [ -s ] <tempo_espera> <usuario_git> <email_git>'; else echo -e 'Invalid command!\nUsage: rcmd [-s] <wait_time>'; fi
        else
            if [ "$LANGUAGE" = "pt_BR" ]; then echo -e 'Comando inválido!\nUso: rcmd [ -s ] <tempo_espera> <usuario_git> <email_git>'; else echo -e 'Invalid command!\nUsage: rcmd [-s] <wait_time> <github_user> <github_email>'; fi
        fi
        printf "${STOP}"
        sleep 2
        exit 1
    fi
fi

# Variables
#check_rootUsers=$UID
check_git=$(which git)
check_gh=$(which gh)
if [ "$1" = "-s" ];then
    wait_time=$2
    if [ -d "$HOME/.cmd" ];then
        echo
    else
        user_git=$3
        email_git=$4
    fi
elif [ -n "$1" ];then
    wait_time=$1
    if [ -d "$HOME/.cmd" ];then
        echo
    else
        user_git=$2
        email_git=$3
    fi
fi

# Depends Check
if [ -z "$check_git" ] || [ -z "$check_gh" ];then
    printf "${ORANGE}"
    if [ "$LANGUAGE" = "pt_BR" ]; then echo -e "Dependencias não estão instaladas e o programa depende delas.\nDeseja instalar? [s/n]"; else echo -e "Depends are not installed and the program depends on it to work.\nDo you want to install it? [y/n]"; fi
    printf "${STOP}"
    read -r installGit
    if [ "$installGit" == "Y" ] || [ "$installGit" == "y" ] || [ "$installGit" == "s" ] || [ "$installGit" == "S" ];then
        if [ -z "$check_git" ]; then 
            sudo apt install git -y 
        elif [ -z "$check_gh" ]; then 
            sudo apt install gh -y
        fi
    elif [ "$installGit" = "n" ];then
        if [ "$LANGUAGE" = "pt_BR" ]; then echo "Saindo..."; else echo "Exitting..."; fi
        sleep 1
        exit 1
    else
        printf "${RED}"
        if [ "$LANGUAGE" = "pt_BR" ]; then echo "Opção inválida!"; else "Invalid Option!"; fi
        if [ "$LANGUAGE" = "pt_BR" ]; then echo "Saindo..."; else echo "Exitting..."; fi
        sleep 1
        printf "${STOP}"
        exit
    fi
fi

# Running...
if [ "$menuOption" -eq 1 ]; then
    printf "${ORANGE_LIGHT}"
    clear
    figlet -c "Remote Shell"
    if [ "$LANGUAGE" = "pt_BR" ]; then echo "Deletando Todas configurações..."; else echo "Deleting all settings..."; fi
    printf "${STOP}"
    printf "${PURPLE}"
    gh repo delete .cmd --confirm
    if [ -e "$HOME/.cmd" ]; then
        rm -rf "$HOME"/.cmd
    fi
    printf "${STOP}"
elif [ "$menuOption" -eq 2 ]; then
    printf "${CYAN}"
    clear
    figlet -c "Remote Shell"
    printf "${GREEN}"
    if [ "$LANGUAGE" = pt_BR ]; then echo "Configurando repositório remoto..."; else echo "Setting remote repo..."; fi

    if [ -d ".cmd" ]; then
        echo
    else
        git config --global user.name "$user_git"
        git config --global user.email "$email_git"
        mkdir "$HOME/.cmd"
        touch comando "$HOME/.cmd"
        echo "ls ." > "$HOME/.cmd/comando"
        touch rcmd.log "$HOME/.cmd"
        echo " " > "$HOME/.cmd/rcmd.log"
        touch README.md "$HOME/.cmd"
        cd "$HOME/.cmd" || exit
        echo "* Put a command inside the comando file to be executed remotely in the remote-shell program." > "$HOME/.cmd/README.md"
        echo "* You can see the execution log in the rcmd.log file." >> "$HOME/cmd/README.md"

        git init
        git add .
        git add comando rcmd.log README.md
        git commit -m "First commit"
        gh repo create -s . --private
        git remote add origin "https://github.com/$2/cmd.git"
        git push -u origin master 
    fi
    printf "${STOP}"

    cd "$HOME/.cmd" || exit
    while true;do
        printf "${CYAN_LIGHT}"
        clear
        figlet -c "Remote Shell"
        printf "${STOP}"
        printf "${GREEN}"
        if [ "$LANGUAGE" = pt_BR ];then echo "Esperando pelo comando..."; else echo "Waiting for command..."; fi
        case "${safe_mode}" in
            s)
                sleep "$wait_time"
                nmcli r all on
                sleep 7s
            ;;
            ?)
                sleep "$wait_time"
            ;;
        esac
        git init &> /dev/null
        git pull origin master &> /dev/null
        cmd=$(cat comando)
        date=$(date)
        if [ "$cmd" == "exit" ];then
            echo "" > rcmd.log
            echo "" > comando
            git add rcmd.log comando &> /dev/null
            git commit -m "commit" &> /dev/null
            git push -u origin master &> /dev/null
            break
        fi

        printf "${ORANGE_LIGHT}"
        echo -e "\n${date^^}" >> ./rcmd.log
        if [ "$LANGUAGE" = pt_BR ]; then echo "Executando..."; else echo "Running..."; fi
        $cmd >> ./rcmd.log 
        if [ "$LANGUAGE" = pt_BR ]; then echo "Executado!"; else echo "Executed!"; fi
        printf "${STOP}"

        git add rcmd.log &> /dev/null
        git commit -m "commit" &> /dev/null
        git push -u origin master &> /dev/null

        case ${safe_mode} in s) nmcli r all off;; esac
        printf "${STOP}"
    done
fi
printf "${PURPLE_LIGHT}"
if [ "$LANGUAGE" = "pt_BR" ]; then echo "Saindo..."; else echo "Exitting..."; fi
sleep 1
printf "${STOP}"
exit 0
